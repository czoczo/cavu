#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: [ main ]
    paths: [ VERSION_APP.txt ]
  workflow_dispatch:
  #workflow_call:

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions: write-all

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    strategy:
      matrix:
        flavour: [distroless, alpine]
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    #permissions:
    #  contents: read
    #  packages: write
    #  attestations: write
    #  id-token: write
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3
      #
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v3
        
      - name: Set tag variables
        run: |
          TAG="$(cat VERSION_APP.txt | tr -dc '[0-9].')-${{ matrix.flavour }}"
          echo "TAG=$TAG" >> $GITHUB_ENV
          if [[ "${{ matrix.flavour }}" == "distroless" ]]; then
            echo "LATEST=latest" >> $GITHUB_ENV
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.TAG }}
            ${{ env.LATEST }}
            
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: Dockerfile.alpine
          #platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Run Trivy vulnerability scanner for created image
        uses: aquasecurity/trivy-action@0.23.0
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}"
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  create_app_version_tag:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    if: needs.build-and-push-image.result == 'success'
    steps:
      - name: Set version variable
        run: |
          VER=$(cat VERSION_APP.txt | tr -dc '[0-9].')
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.VERSION }}',
              sha: context.sha
            })
      
      
